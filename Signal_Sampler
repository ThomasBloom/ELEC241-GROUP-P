LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

entity CLK_MANIP_V2 is
	generic
	(	
		clock_divider  : integer := 50         --scaler value [50MHz/50 = 1MHz]
	);

	port
	(
		SCLK				: in  std_logic;			--input FPGA clock [50MHz]
		RESET				: in  std_logic;			--asynchrounous active LOW 
		
		CS					: out std_logic;			-- chip select
		SCLK_OUT			: out std_logic         --1Mhz reduced freq to ADC
		);
			
end entity;

architecture freq_divider_V2 of CLK_MANIP_V2 is
	
	signal	new_wave					: std_logic;
	signal	CS_REGISTER					: std_logic;
	signal	slave_counter_reg		: integer range 0 to clock_divider := 0;
	signal	clock_counter_reg		: integer range 0 to clock_divider := 0;		

begin
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
process (SCLK, RESET)
begin
		
		if(RESET = '1') then 
			clock_counter_reg	<=  0 ;
			new_wave				<=	'1';
			
		elsif(rising_edge(SCLK)) then
		
			if(clock_counter_reg  = (clock_divider/2)-1) then         --[clock_divider/2 = 25] the answer 25 subtract 1 gives 24 ...
																						 --... counter starts counting from 0 & finishes at 24 and thats 25 values.
				clock_counter_reg <= 0;											 --after incrementing to 24 RESET the values back to 0 and restart counting.
				new_wave		   	<= not new_wave;							 --after a full count, toggle the state of the value to create a square wave.
			else
				clock_counter_reg <= clock_counter_reg + 1;            --increment values from 0 - 24 by adding a 1 after every value.
			end if;
		end if;
	end process;
	
	SCLK_OUT <=  new_wave;                                             --assign SCLK_OUT to the toggled value above (new_wave). Thus our new clock out with reduced freq. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
process (SCLK, RESET)
begin
		
		if(RESET = '1') then 
			slave_counter_reg	<=  0 ;
			CS_REGISTER			<=	'1';
			
		elsif(rising_edge(SCLK)) then
			
			if(slave_counter_reg  = (clock_divider-40)) then
	
				slave_counter_reg		<=  0 ;
				CS_REGISTER				<=	'0';
				
			else
					slave_counter_reg <= slave_counter_reg + 1; 
			
			end if;
		end if;
end process;

CS <=  CS_REGISTER; 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------	
		
	
end freq_divider_V2;
